Index: script/DHOV/MainDHOV.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import torch\r\nfrom torchvision.datasets import CIFAR10\r\nfrom torchvision.transforms import Compose, ToTensor, Normalize\r\n\r\nimport DataSampling as ds\r\nimport DHOV as dhov\r\nfrom torch.utils.data import DataLoader\r\nfrom script.NeuralNets.Networks import SequentialNN, ICNN\r\nfrom script.dataInit import Rhombus, ConvexDataset\r\n\r\n\r\ndef last_layer_identity(last_icnn: ICNN, last_c, W, b, A_out, b_out, nn_bounds, solver_time_limit, solver_bound):\r\n    m = Model()\r\n    m.Params.LogToConsole = 0\r\n    if solver_time_limit is not None:\r\n        m.setParam(\"TimeLimit\", solver_time_limit)\r\n\r\n    if solver_bound is not None:\r\n        m.setParam(\"BestObjStop\", solver_bound)\r\n\r\n    output_var = m.addMVar(2, lb=-float('inf'))\r\n\r\n    icnn_input_size = last_icnn.layer_widths[0]\r\n    output_of_penultimate_layer = m.addMVar(icnn_input_size, lb=-float('inf'))\r\n    output_of_icnn = m.addMVar(1, lb=-float('inf'))\r\n    bounds = verbas.calculate_box_bounds(last_icnn, nn_bounds[len(nn_bounds) - 1], is_sequential=False)\r\n    verbas.add_constr_for_non_sequential_icnn(m, last_icnn, output_of_penultimate_layer, output_of_icnn, bounds)\r\n    m.addConstr(output_of_icnn[0] <= last_c)\r\n\r\n    W = W.detach().numpy()\r\n    b = b.detach().numpy()\r\n    # output_var = add_affine_constr(m, W, b, output_of_penultimate_layer, -1000, 1000)\r\n\r\n    # m.addConstrs((W[i] @ output_var >= b[i] for i in range(len(W))))\r\n\r\n    m.addConstrs(W[i] @ output_of_penultimate_layer + b[i] == output_var[i] for i in range(len(W)))\r\n\r\n    # constr = m.addMConstr(A_out, output_var.tolist(), \">\", b_out)\r\n\r\n    max_var = m.addMVar(2, lb=-float('inf'), ub=1000)\r\n\r\n    m.addConstr(max_var[0] == abs_(output_var[0]))  # maximize distance to origin without norm\r\n    m.addConstr(max_var[1] == abs_(\r\n        output_var[1]))  # todo diese nachbedinung garantiert nicht, dass etwas au√üerhalb maximal ist!\r\n\r\n    m.update()\r\n    m.setObjective(max_var[0] + max_var[1], GRB.MAXIMIZE)\r\n    m.optimize()\r\n\r\n    solution = 0\r\n    if m.Status == GRB.OPTIMAL or m.Status == GRB.TIME_LIMIT:\r\n        # print(\"optimum solution with value \\n {}\".format(output_var.getAttr(\"x\")))\r\n        print(\"icnn_in_var {}\".format(output_of_penultimate_layer.getAttr(\"x\")))\r\n        print(\"max_var {}\".format(output_of_icnn.getAttr(\"x\")))\r\n        output = output_var.getAttr(\"x\")\r\n        print(\"output {}\".format(output_var.getAttr(\"x\")))\r\n        sol = output_of_penultimate_layer.getAttr(\"x\")\r\n        sol = torch.tensor(sol, dtype=torch.float64)\r\n        sol = torch.unsqueeze(sol, 0)\r\n        out = last_icnn(sol)\r\n        print(out)\r\n\r\n        print(\"======================= \\n\")\r\n        if Rhombus().f(output):\r\n            print(\"Verification was successful\")\r\n        else:\r\n            print(\"Verification failed\")\r\n        print(\"\\n =======================\")\r\n\r\n\r\ndef last_layer_picture(last_icnn: ICNN, last_c, W, b, label, nn_bounds, solver_time_limit, solver_bound):\r\n    m = Model()\r\n\r\n    if solver_time_limit is not None:\r\n        m.setParam(\"TimeLimit\", solver_time_limit)\r\n\r\n    if solver_bound is not None:\r\n        m.setParam(\"BestObjStop\", solver_bound)\r\n\r\n    icnn_input_size = last_icnn.layer_widths[0]\r\n    output_of_penultimate_layer = m.addMVar(icnn_input_size, lb=-float('inf'))\r\n    output_of_icnn = m.addMVar(1, lb=-float('inf'))\r\n    verbas.add_constr_for_non_sequential_icnn(m, last_icnn, output_of_penultimate_layer, output_of_icnn,\r\n                                              nn_bounds[len(nn_bounds) - 2])\r\n\r\n    W = W.detach().numpy()\r\n    b = b.detach().numpy()\r\n    output_var = verbas.add_affine_constr(m, W, b, output_of_penultimate_layer, -1000, 1000)\r\n    m.addConstr(output_of_icnn <= last_c)\r\n\r\n    difference = m.addVars(9, lb=-float('inf'))\r\n    m.addConstrs(difference[i] == output_var.tolist()[i] - output_var.tolist()[label] for i in range(0, label))\r\n    m.addConstrs(difference[i - 1] == output_var.tolist()[i] - output_var.tolist()[label] for i in range(label + 1, 10))\r\n\r\n    # m.addConstrs(difference[i] == output_var.tolist()[i] - output_var.tolist()[label] for i in range(10))\r\n    max_var = m.addVar(lb=-float('inf'), ub=1000)\r\n    m.addConstr(max_var == max_(difference))\r\n\r\n    m.update()\r\n    m.setObjective(max_var, GRB.MAXIMIZE)\r\n    m.optimize()\r\n\r\n    solution = 0\r\n    if m.Status == GRB.OPTIMAL or m.Status == GRB.TIME_LIMIT or m.Status == GRB.USER_OBJ_LIMIT:\r\n        for o in difference.select():\r\n            print(o.getAttr(\"x\"))\r\n        print(\"optimum solution with value \\n {}\".format(output_var.getAttr(\"x\")))\r\n        print(\"max_var {}\".format(max_var.getAttr(\"x\")))\r\n        sol = output_of_penultimate_layer.getAttr(\"x\")\r\n\r\n        sol = torch.tensor(sol, dtype=torch.float64)\r\n        sol = torch.unsqueeze(sol, 0)\r\n        out = last_icnn(sol)\r\n        print(out)\r\n\r\n\r\ndef net_2d():\r\n    batch_size = 10\r\n    epochs = 30\r\n    number_of_train_samples = 10000\r\n    hyper_lambda = 1\r\n    x_range = [-1.5, 1.5]\r\n    y_range = [-1.5, 1.5]\r\n\r\n    included_space, ambient_space = Rhombus().get_uniform_samples(number_of_train_samples, x_range,\r\n                                                                  y_range)  # samples will be split in inside and outside the rhombus\r\n\r\n    dataset_in = ConvexDataset(data=included_space)\r\n    train_loader = DataLoader(dataset_in, batch_size=batch_size, shuffle=True)\r\n    dataset = ConvexDataset(data=ambient_space)\r\n    ambient_loader = DataLoader(dataset, batch_size=batch_size, shuffle=True)\r\n\r\n    \"\"\"W1 = [1. 1.; 1. -1.]\r\n    b1 = [0., 0.]\r\n    W2 = [1. 1.; 1. -1.]\r\n    b2 = [-0.5, 0.]\r\n    W3 = [-1. 1.; 1. 1.]\r\n    b3 = [3., 0.] \"\"\"\r\n\r\n    nn = SequentialNN([2, 2, 2, 2])\r\n\r\n\r\n    with torch.no_grad():\r\n        parameter_list = list(nn.parameters())\r\n        parameter_list[0].data = torch.tensor([[1, 1], [1, -1]], dtype=torch.float64)\r\n        parameter_list[1].data = torch.tensor([0, 0], dtype=torch.float64)\r\n        parameter_list[2].data = torch.tensor([[1, 1], [1, -1]], dtype=torch.float64)\r\n        parameter_list[3].data = torch.tensor([-0.5, 0], dtype=torch.float64)\r\n        parameter_list[4].data = torch.tensor([[-1, 1], [1, 1]], dtype=torch.float64)\r\n        parameter_list[5].data = torch.tensor([3, 0], dtype=torch.float64)\r\n\r\n    # nn.load_state_dict(torch.load(\"nn_2x2.pt\"), strict=False)\r\n    # train_sequential_2(nn, train_loader, ambient_loader, epochs=epochs)\r\n\r\n\r\n    # matplotlib.use('TkAgg')\r\n\r\n    # torch.save(nn.state_dict(), \"nn_2x2.pt\")\r\n\r\n\r\n    test_image = torch.tensor([[0, 0]], dtype=torch.float64)\r\n    icnns, c_values = \\\r\n        dhov.start_verification(nn, test_image, eps=1, icnn_epochs=500, sample_new=True, use_over_approximation=True,\r\n                                sample_over_input_space=False, sample_over_output_space=True,\r\n                                keep_ambient_space=False, use_grad_descent=False, train_outer=False,\r\n                                should_plot=\"simple\", optimizer=\"adam\")\r\n\r\n\r\ndef cifar_net():\r\n    batch_size = 10\r\n    epochs = 30\r\n    number_of_train_samples = 10000\r\n    hyper_lambda = 1\r\n    x_range = [-1.5, 1.5]\r\n    y_range = [-1.5, 1.5]\r\n\r\n    transform = Compose([ToTensor(),\r\n                         Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]\r\n                        )\r\n\r\n    training_data = CIFAR10(root=\"../../cifar\",\r\n                            train=True,\r\n                            download=True,\r\n                            transform=transform)\r\n    images, labels = training_data.__getitem__(0)\r\n    testimage, testlabel = torch.unsqueeze(images, 0).to(dtype=torch.float64), torch.unsqueeze(torch.tensor(labels), 0).to(dtype=torch.float64)\r\n\r\n    nn = SequentialNN([32 * 32 * 3, 1024, 512, 10])\r\n    nn.load_state_dict(torch.load(\"../../cifar_fc.pth\", map_location=torch.device('cpu')), strict=False)\r\n\r\n\r\n    # matplotlib.use('TkAgg')\r\n\r\n    icnns, c_values = \\\r\n        dhov.start_verification(nn, testimage, eps=1, icnn_epochs=500, sample_new=True, use_over_approximation=True,\r\n                                sample_over_input_space=False, sample_over_output_space=True,\r\n                                keep_ambient_space=False, use_grad_descent=False, train_outer=False,\r\n                                should_plot=\"detailed\")\r\n\r\n#cifar_net()\r\nnet_2d()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/script/DHOV/MainDHOV.py b/script/DHOV/MainDHOV.py
--- a/script/DHOV/MainDHOV.py	(revision 086b725aac53462cf49c9ca0b6e173a6b1f39799)
+++ b/script/DHOV/MainDHOV.py	(date 1674822490054)
@@ -160,10 +160,10 @@
 
     test_image = torch.tensor([[0, 0]], dtype=torch.float64)
     icnns, c_values = \
-        dhov.start_verification(nn, test_image, eps=1, icnn_epochs=500, sample_new=True, use_over_approximation=True,
+        dhov.start_verification(nn, test_image, eps=1, icnn_epochs=70, sample_new=True, use_over_approximation=True,
                                 sample_over_input_space=False, sample_over_output_space=True,
                                 keep_ambient_space=False, use_grad_descent=False, train_outer=False,
-                                should_plot="simple", optimizer="adam")
+                                should_plot="detailed", optimizer="LBFGS")
 
 
 def cifar_net():
Index: script/NeuralNets/trainFunction.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import time\r\n\r\nimport torch\r\n\r\nimport torch.nn as nn\r\n\r\nfrom script.NeuralNets.lossFunction import deep_hull_simple_loss\r\nfrom script.NeuralNets.testFunction import test\r\nfrom script.Optimizer.sdlbfgs import SdLBFGS\r\n\r\n\r\ndef train_icnn(model, train_loader, ambient_loader, epochs=10, optimizer=None,\r\n               return_history=False, sequential=False, hyper_lambda=1):\r\n    history = []\r\n    if optimizer is None or optimizer == \"adam\":\r\n        opt = torch.optim.Adam(model.parameters())\r\n    elif optimizer == \"LBFGS\":\r\n        opt = SdLBFGS(model.parameters())\r\n        #opt = torch.optim.LBFGS(model.parameters(), lr=0.1)\r\n\r\n    stop_training = False\r\n\r\n    for epoch in range(epochs):\r\n        train_loss = 0\r\n        train_n = 0\r\n        if stop_training:\r\n            print(\"preemptive stop of training\")\r\n            break\r\n        print(\"=== Epoch: {}===\".format(epoch))\r\n        epoch_start_time = time.time()\r\n        for i, (X, X_ambient) in enumerate(zip(train_loader, ambient_loader)):\r\n            ws = list(model.ws.parameters())\r\n            us = list(model.us.parameters())\r\n            if optimizer == \"LBFGS\":\r\n                def closure():\r\n                    opt.zero_grad()\r\n                    prediction_ambient = model(X_ambient)\r\n                    output = model(X)\r\n                    loss = deep_hull_simple_loss(output, prediction_ambient, hyper_lambda=hyper_lambda)\r\n                    loss.backward()\r\n                    return loss\r\n                loss = closure()\r\n                opt.step(closure)\r\n\r\n            else:\r\n                prediction_ambient = model(X_ambient)\r\n                output = model(X)\r\n                loss = deep_hull_simple_loss(output, prediction_ambient, hyper_lambda=hyper_lambda)\r\n                opt.zero_grad()\r\n                loss.backward()\r\n                opt.step()\r\n\r\n            if not sequential:\r\n                with torch.no_grad():\r\n                    for w in model.ws:\r\n                        for p in w.parameters():\r\n                            if len(p.size()) > 1:  # we have a matrix\r\n                                # only want positive entries\r\n                                p[:] = torch.maximum(torch.Tensor([0]), p)\r\n            else:\r\n                with torch.no_grad():\r\n                    for p in model.parameters():\r\n                        if len(p.size()) > 1:  # we have a matrix\r\n                            # only want positive entries\r\n                            p[:] = torch.maximum(torch.Tensor([0]), p)\r\n\r\n            train_loss += loss.item()\r\n            train_n += 1\r\n\r\n            if return_history:\r\n                history.append(train_loss / train_n)\r\n\r\n            if i % 100 == 0:\r\n                print(\"batch = {}, mean loss = {}\".format(i, train_loss / train_n))\r\n\r\n        if train_n == 0:\r\n            train_n = 1\r\n        print(\"batch = {}, mean loss = {}\".format(len(train_loader), train_loss / train_n))\r\n        print(\"time per epoch: {}\".format(time.time() - epoch_start_time))\r\n\r\n    if return_history:\r\n        return history\r\n\r\n\r\ndef train_icnn_lbfgs(model, train_loader, ambient_loader, epochs=10, return_history=False, sequential=False,\r\n                     hyper_lambda=1):\r\n    history = []\r\n    opt = torch.optim.LBFGS(model.parameters())\r\n    for epoch in range(epochs):\r\n        train_loss = 0\r\n        train_n = 0\r\n\r\n        print(\"=== Epoch: {}===\".format(epoch))\r\n        epoch_start_time = time.time()\r\n        for i, (X, X_ambient) in enumerate(zip(train_loader, ambient_loader)):\r\n\r\n            def closure():\r\n                opt.zero_grad()\r\n                prediction_ambient = model(X_ambient)\r\n                output = model(X)\r\n                loss = deep_hull_simple_loss(output, prediction_ambient, hyper_lambda=hyper_lambda)\r\n                loss.backward()\r\n                return loss\r\n\r\n            opt.step(closure)\r\n\r\n            if not sequential:\r\n                with torch.no_grad():\r\n                    for w in model.ws:\r\n                        for p in w.parameters():\r\n                            if len(p.size()) > 1:  # we have a matrix\r\n                                # only want positive entries\r\n                                p[:] = torch.maximum(torch.Tensor([0]), p)\r\n            else:\r\n                with torch.no_grad():\r\n                    for p in model.parameters():\r\n                        if len(p.size()) > 1:  # we have a matrix\r\n                            # only want positive entries\r\n                            p[:] = torch.maximum(torch.Tensor([0]), p)\r\n\r\n            train_loss += loss.item()\r\n            train_n += 1\r\n\r\n            if return_history:\r\n                history.append(train_loss / train_n)\r\n\r\n            if i % 100 == 0:\r\n                print(\"batch = {}, mean loss = {}\".format(i, train_loss / train_n))\r\n\r\n        print(\"batch = {}, mean loss = {}\".format(len(train_loader), train_loss / train_n))\r\n        print(\"time per epoch: {}\".format(time.time() - epoch_start_time))\r\n\r\n    if return_history:\r\n        return history\r\n\r\n\r\ndef train_icnn_outer(model, ambient_loader, x_argmin, x_min, epochs=10, opt=None, return_history=False,\r\n                     sequential=False):\r\n    history = []\r\n    if opt is None:\r\n        opt = torch.optim.Adam(model.parameters())\r\n    torch.autograd.set_detect_anomaly(True)\r\n\r\n    for epoch in range(epochs):\r\n        train_loss = 0\r\n        train_n = 0\r\n\r\n        print(\"=== Epoch: {}===\".format(epoch))\r\n        epoch_start_time = time.time()\r\n        for i, X_ambient in enumerate(ambient_loader):\r\n            output = model(X_ambient)\r\n            loss = deep_hull_outer_loss(output, X_ambient, x_argmin, x_min)\r\n            opt.zero_grad()\r\n            loss.backward()\r\n            opt.step()\r\n\r\n            if not sequential:\r\n                with torch.no_grad():\r\n                    for w in model.ws:\r\n                        for p in w.parameters():\r\n                            if len(p.size()) > 1:  # we have a matrix\r\n                                # only want positive entries\r\n                                p[:] = torch.maximum(torch.Tensor([0]), p)\r\n            else:\r\n                with torch.no_grad():\r\n                    for p in model.parameters():\r\n                        if len(p.size()) > 1:  # we have a matrix\r\n                            # only want positive entries\r\n                            p[:] = torch.maximum(torch.Tensor([0]), p)\r\n\r\n            train_loss += loss.item()\r\n            train_n += 1\r\n\r\n            if return_history:\r\n                history.append(train_loss / train_n)\r\n\r\n            if i % 100 == 0:\r\n                print(\"batch = {}, mean loss = {}\".format(i, train_loss / train_n))\r\n\r\n        print(\"batch = {}, mean loss = {}\".format(len(ambient_loader), train_loss / train_n))\r\n        print(\"time per epoch: {}\".format(time.time() - epoch_start_time))\r\n\r\n    if return_history:\r\n        return history\r\n\r\n\r\ndef train_icnn_adversarial(model, adversarial, train_loader, adversarial_loader, epochs=10, train_ICNN=True,\r\n                           opt_model=None, opt_adv=None, return_history=False, hyper_lambda=1, use_max_distance=False):\r\n    history = []\r\n    model.train()\r\n    adversarial.train()\r\n    if opt_model is None:\r\n        opt_model = torch.optim.Adam(model.parameters())\r\n\r\n    if opt_adv is None:\r\n        opt_adv = torch.optim.Adam(adversarial.parameters())\r\n\r\n    for epoch in range(epochs):\r\n        train_loss = 0\r\n        train_n = 0\r\n        l_pos, l_neg, l_gen = 0, 0, 0\r\n\r\n        print(\"=== Epoch: {}===\".format(epoch))\r\n\r\n        for i, (X, X_adv) in enumerate(zip(train_loader, adversarial_loader)):\r\n            output_adv = adversarial(X_adv)\r\n\r\n            prediction_from_adv = model(output_adv)\r\n            output = model(X)\r\n\r\n            loss, a, b, c = deep_hull_loss(output, output_adv, prediction_from_adv, hyper_lambda=hyper_lambda,\r\n                                           use_max_distance=use_max_distance)\r\n\r\n            opt_model.zero_grad()\r\n            opt_adv.zero_grad()\r\n\r\n            loss.backward()\r\n\r\n            opt_adv.step()\r\n\r\n            if train_ICNN:\r\n                opt_model.step()\r\n                with torch.no_grad():\r\n                    for w in model.ws:\r\n                        for p in w.parameters():\r\n                            if len(p.size()) > 1:  # we have a matrix\r\n                                # only want positive entries\r\n                                p[:] = torch.maximum(torch.Tensor([0]), p)\r\n\r\n            train_loss += loss.item()\r\n            train_n += 1\r\n            l_pos += a.item()\r\n            l_neg += b.item()\r\n            l_gen += c.item()\r\n\r\n            if return_history:\r\n                history.append(train_loss / train_n)\r\n\r\n            if i % 100 == 0:\r\n                print(\"batch = {}, mean loss = {}, l_pos = {}, l_neg = {}, l_gen = {}\".\r\n                      format(i, train_loss / train_n, l_pos / train_n, l_neg / train_n, l_gen / train_n))\r\n\r\n        print(\"batch = {}, mean loss = {}, l_pos = {}, l_neg = {}, l_gen = {}\".\r\n              format(len(train_loader), train_loss / train_n, l_pos / train_n, l_neg / train_n, l_gen / train_n))\r\n\r\n    if return_history:\r\n        return history\r\n\r\n\r\ndef train_sequential(model, train_data, test_data, loss_fn=nn.CrossEntropyLoss(), optimizer=None, epochs=10):\r\n    if optimizer is None:\r\n        optimizer = torch.optim.SGD(model.parameters(), lr=0.001)\r\n\r\n    size = len(train_data.dataset)\r\n    model.train()\r\n\r\n    for epoch in range(epochs):\r\n\r\n        print(\"=== Epoch: {}===\".format(epoch))\r\n        current = time.time()\r\n        for batch, (X, y) in enumerate(train_data):\r\n            # Compute prediction error\r\n            pred = model(X)\r\n            loss = loss_fn(pred, y)\r\n            # Backpropagation\r\n            optimizer.zero_grad()\r\n            loss.backward()\r\n            optimizer.step()\r\n            if batch % 2000 == 0:\r\n                loss, current = loss.item(), batch * len(X)\r\n                print(f\"loss: {loss:>7f}  [{current:>5d}/{size:>5d}]\")\r\n\r\n        test(model, test_data, loss_fn=loss_fn)\r\n        current = time.time() - current\r\n        print(\"Time: {}\".format(current))\r\n\r\n\r\ndef train_sequential_2(model, train_loader, ambient_loader, epochs=10, return_history=False):\r\n    history = []\r\n\r\n    opt = torch.optim.Adam(model.parameters())\r\n    criterion = torch.nn.MSELoss()\r\n    for epoch in range(epochs):\r\n        train_loss = 0\r\n        train_n = 0\r\n\r\n        print(\"=== Epoch: {}===\".format(epoch))\r\n\r\n        for i, (x_included, x_ambient) in enumerate(zip(train_loader, ambient_loader)):\r\n            output_included = model(x_included)\r\n            output_ambient = model(x_ambient)\r\n\r\n            # loss = identity_loss(output_included, output_ambient, x_included, x_ambient)\r\n            pred = torch.cat([output_included, output_ambient])\r\n            label = torch.cat([x_included, x_ambient])\r\n            loss = criterion(pred, label)\r\n            opt.zero_grad()\r\n            loss.backward()\r\n            opt.step()\r\n\r\n            train_loss += loss.item()\r\n            train_n += 1\r\n\r\n            if return_history:\r\n                history.append(train_loss / train_n)\r\n\r\n            if i % 100 == 0:\r\n                print(\"batch = {}, mean loss = {}\".format(i, train_loss / train_n))\r\n\r\n        print(\"batch = {}, mean loss = {}\".format(len(train_loader), train_loss / train_n))\r\n\r\n    if return_history:\r\n        return history\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/script/NeuralNets/trainFunction.py b/script/NeuralNets/trainFunction.py
--- a/script/NeuralNets/trainFunction.py	(revision 086b725aac53462cf49c9ca0b6e173a6b1f39799)
+++ b/script/NeuralNets/trainFunction.py	(date 1674822490054)
@@ -16,7 +16,7 @@
         opt = torch.optim.Adam(model.parameters())
     elif optimizer == "LBFGS":
         opt = SdLBFGS(model.parameters())
-        #opt = torch.optim.LBFGS(model.parameters(), lr=0.1)
+        # = torch.optim.LBFGS(model.parameters(), lr=0.1)
 
     stop_training = False
 
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"90b0f737-acac-430b-a76c-cab51a684379\" name=\"Changes\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/script/DHOV/DHOV.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/script/DHOV/DHOV.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/script/DHOV/MainDHOV.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/script/DHOV/MainDHOV.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/script/NeuralNets/Networks.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/script/NeuralNets/Networks.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/script/NeuralNets/lossFunction.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/script/NeuralNets/lossFunction.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/script/NeuralNets/trainFunction.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/script/NeuralNets/trainFunction.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/script/Verification/VerificationBasics.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/script/Verification/VerificationBasics.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/script/dataInit.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/script/dataInit.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Jupyter Notebook\" />\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"HighlightingSettingsPerFile\">\r\n    <setting file=\"file://$USER_HOME$/miniconda3/envs/torchCPU/Lib/site-packages/IPython/core/interactiveshell.py\" root0=\"SKIP_INSPECTION\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2HYpgVj2snAj00JcLdeLZlaExwO\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"1\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"WebServerToolWindowFactoryState\": \"false\",\r\n    \"last_opened_file_path\": \"C:/Users/Ufuk/Documents/Programming/ICNN_verification/script/Optimizer\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"settings.editor.selected.configurable\": \"com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\Ufuk\\Documents\\Programming\\ICNN_verification\\script\\Optimizer\" />\r\n      <recent name=\"C:\\Users\\Ufuk\\Documents\\Programming\\ICNN_verification\\script\\Experiments\" />\r\n      <recent name=\"C:\\Users\\Ufuk\\Documents\\Programming\\DeepHull\\script\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\Ufuk\\Documents\\Programming\\ICNN_verification\\script\\Verification_basics\" />\r\n      <recent name=\"C:\\Users\\Ufuk\\Documents\\Programming\\ICNN_verification\\script\\NeuralNets\" />\r\n      <recent name=\"C:\\Users\\Ufuk\\Documents\\Programming\\ICNN_verification\\script\\DHOV\" />\r\n      <recent name=\"C:\\Users\\Ufuk\\Documents\\Programming\\ICNN_verification\" />\r\n      <recent name=\"C:\\Users\\Ufuk\\Documents\\Programming\\DeepHull\\script\\Experiments\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Python.MainDHOV\">\r\n    <configuration name=\"DHOV\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"DeepHull\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"C:\\Users\\Ufuk\\miniconda3\\envs\\torchCPU\\python.exe\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/script\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/script/DHOV/DHOV.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"MainDHOV\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"DeepHull\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"C:\\Users\\Ufuk\\miniconda3\\envs\\torchCPU\\python.exe\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/script/DHOV\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/script/DHOV/MainDHOV.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Normalisation\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"DeepHull\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"C:\\Users\\Ufuk\\miniconda3\\envs\\torchCPU\\python.exe\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/script\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"C:\\Users\\Ufuk\\Documents\\Programming\\ICNN_verification\\script\\DHOV\\Normalisation.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"true\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"main\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"DeepHull\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/script/main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"test\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"DeepHull\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"C:\\Users\\Ufuk\\miniconda3\\envs\\torchCPU\\python.exe\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/script\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/script/test.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"Python.main\" />\r\n      <item itemvalue=\"Python.DHOV\" />\r\n      <item itemvalue=\"Python.MainDHOV\" />\r\n      <item itemvalue=\"Python.test\" />\r\n      <item itemvalue=\"Python.Normalisation\" />\r\n    </list>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"90b0f737-acac-430b-a76c-cab51a684379\" name=\"Changes\" comment=\"\" />\r\n      <created>1668471982940</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1668471982940</updated>\r\n      <workItem from=\"1668471995035\" duration=\"27149000\" />\r\n      <workItem from=\"1668503643904\" duration=\"10229000\" />\r\n      <workItem from=\"1668607608314\" duration=\"2130000\" />\r\n      <workItem from=\"1668674040870\" duration=\"8008000\" />\r\n      <workItem from=\"1668689580556\" duration=\"37721000\" />\r\n      <workItem from=\"1668772582419\" duration=\"14135000\" />\r\n      <workItem from=\"1669019837013\" duration=\"32540000\" />\r\n      <workItem from=\"1669102162778\" duration=\"2024000\" />\r\n      <workItem from=\"1669115251344\" duration=\"18785000\" />\r\n      <workItem from=\"1669215982955\" duration=\"20549000\" />\r\n      <workItem from=\"1669242958346\" duration=\"507000\" />\r\n      <workItem from=\"1669243479479\" duration=\"3767000\" />\r\n      <workItem from=\"1669336514761\" duration=\"8579000\" />\r\n      <workItem from=\"1669375167094\" duration=\"2984000\" />\r\n      <workItem from=\"1669412279754\" duration=\"4721000\" />\r\n      <workItem from=\"1669544390271\" duration=\"3279000\" />\r\n      <workItem from=\"1669820710385\" duration=\"1800000\" />\r\n      <workItem from=\"1670060554317\" duration=\"28825000\" />\r\n      <workItem from=\"1670193281795\" duration=\"8609000\" />\r\n      <workItem from=\"1670206767527\" duration=\"890000\" />\r\n      <workItem from=\"1670240176290\" duration=\"44476000\" />\r\n      <workItem from=\"1670325007465\" duration=\"6515000\" />\r\n      <workItem from=\"1670426260278\" duration=\"3560000\" />\r\n      <workItem from=\"1670446068392\" duration=\"1917000\" />\r\n      <workItem from=\"1670488876310\" duration=\"168000\" />\r\n      <workItem from=\"1670509136900\" duration=\"8015000\" />\r\n      <workItem from=\"1670581513730\" duration=\"13376000\" />\r\n      <workItem from=\"1670599834771\" duration=\"720000\" />\r\n      <workItem from=\"1670666681316\" duration=\"11322000\" />\r\n      <workItem from=\"1670746248674\" duration=\"5929000\" />\r\n      <workItem from=\"1670756905637\" duration=\"4432000\" />\r\n      <workItem from=\"1670831139927\" duration=\"121000\" />\r\n      <workItem from=\"1670840850433\" duration=\"10000\" />\r\n      <workItem from=\"1670850132225\" duration=\"3831000\" />\r\n      <workItem from=\"1670922962206\" duration=\"19897000\" />\r\n      <workItem from=\"1670960020039\" duration=\"10424000\" />\r\n      <workItem from=\"1670998257547\" duration=\"10354000\" />\r\n      <workItem from=\"1671012044811\" duration=\"62000\" />\r\n      <workItem from=\"1671188199755\" duration=\"27900000\" />\r\n      <workItem from=\"1671387093153\" duration=\"1003000\" />\r\n      <workItem from=\"1671497076028\" duration=\"5264000\" />\r\n      <workItem from=\"1671533055727\" duration=\"22633000\" />\r\n      <workItem from=\"1671611929610\" duration=\"1927000\" />\r\n      <workItem from=\"1671617053253\" duration=\"80000\" />\r\n      <workItem from=\"1671636670671\" duration=\"2277000\" />\r\n      <workItem from=\"1671665711262\" duration=\"17308000\" />\r\n      <workItem from=\"1673261889553\" duration=\"40000\" />\r\n      <workItem from=\"1673270460293\" duration=\"18498000\" />\r\n      <workItem from=\"1673346205242\" duration=\"598000\" />\r\n      <workItem from=\"1673394591094\" duration=\"1108000\" />\r\n      <workItem from=\"1673433014914\" duration=\"98000\" />\r\n      <workItem from=\"1673447353802\" duration=\"14920000\" />\r\n      <workItem from=\"1673512718161\" duration=\"21007000\" />\r\n      <workItem from=\"1673667348107\" duration=\"2899000\" />\r\n      <workItem from=\"1673900048566\" duration=\"19404000\" />\r\n      <workItem from=\"1674032319345\" duration=\"14271000\" />\r\n      <workItem from=\"1674056903311\" duration=\"2539000\" />\r\n      <workItem from=\"1674218405934\" duration=\"29145000\" />\r\n      <workItem from=\"1674384292274\" duration=\"18248000\" />\r\n      <workItem from=\"1674463988862\" duration=\"3452000\" />\r\n      <workItem from=\"1674480304243\" duration=\"12792000\" />\r\n      <workItem from=\"1674563647198\" duration=\"4388000\" />\r\n      <workItem from=\"1674643287094\" duration=\"1397000\" />\r\n      <workItem from=\"1674657323471\" duration=\"16484000\" />\r\n      <workItem from=\"1674725160015\" duration=\"1407000\" />\r\n      <workItem from=\"1674729462120\" duration=\"7423000\" />\r\n      <workItem from=\"1674741702262\" duration=\"101000\" />\r\n      <workItem from=\"1674741815193\" duration=\"462000\" />\r\n      <workItem from=\"1674742504018\" duration=\"7087000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/script/NeuralNets/trainFunction.py</url>\r\n          <line>205</line>\r\n          <option name=\"timeStamp\" value=\"274\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/script/NeuralNets/trainFunction.py</url>\r\n          <line>188</line>\r\n          <option name=\"timeStamp\" value=\"275\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/script/DHOV/Normalisation.py</url>\r\n          <line>19</line>\r\n          <option name=\"timeStamp\" value=\"278\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/script/Verification/Verification.py</url>\r\n          <line>58</line>\r\n          <option name=\"timeStamp\" value=\"319\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/script/NeuralNets/trainFunction.py</url>\r\n          <line>140</line>\r\n          <option name=\"timeStamp\" value=\"432\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"jupyter-line\">\r\n          <url>notebook://C:/Users/Ufuk/Documents/Programming/ICNN_verification/script/Experiments/NonGenerativeExperiment.ipynb</url>\r\n          <line>3</line>\r\n          <option name=\"timeStamp\" value=\"286\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n      <default-breakpoints>\r\n        <breakpoint type=\"python-exception\">\r\n          <properties notifyOnTerminate=\"true\" exception=\"BaseException\">\r\n            <option name=\"notifyOnTerminate\" value=\"true\" />\r\n          </properties>\r\n        </breakpoint>\r\n      </default-breakpoints>\r\n    </breakpoint-manager>\r\n    <watches-manager>\r\n      <configuration name=\"CIFAR10_MILP_Verification\">\r\n        <watch expression=\"lb\" />\r\n      </configuration>\r\n    </watches-manager>\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/ICNN_verification$VerificationMethod.coverage\" NAME=\"VerificationMethod Coverage Results\" MODIFIED=\"1670197619802\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/script\" />\r\n    <SUITE FILE_PATH=\"coverage/ICNN_verification$dataInit.coverage\" NAME=\"dataInit Coverage Results\" MODIFIED=\"1670107995866\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/script\" />\r\n    <SUITE FILE_PATH=\"coverage/ICNN_verification$Normalisation.coverage\" NAME=\"Normalisation Coverage Results\" MODIFIED=\"1671204683259\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/script\" />\r\n    <SUITE FILE_PATH=\"coverage/DeepHull$main.coverage\" NAME=\"main Coverage Results\" MODIFIED=\"1669233392579\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/ICNN_verification$main.coverage\" NAME=\"main Coverage Results\" MODIFIED=\"1670249050825\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/ICNN_verification$DHOV.coverage\" NAME=\"DHOV Coverage Results\" MODIFIED=\"1674467903275\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/script\" />\r\n    <SUITE FILE_PATH=\"coverage/ICNN_verification$MainDHOV.coverage\" NAME=\"MainDHOV Coverage Results\" MODIFIED=\"1674749839986\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/script/DHOV\" />\r\n    <SUITE FILE_PATH=\"coverage/DeepHull$Verification.coverage\" NAME=\"Verification Coverage Results\" MODIFIED=\"1669122239179\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/script\" />\r\n    <SUITE FILE_PATH=\"coverage/ICNN_verification$test.coverage\" NAME=\"test Coverage Results\" MODIFIED=\"1673302337900\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/script\" />\r\n    <SUITE FILE_PATH=\"coverage/DeepHull$eval.coverage\" NAME=\"eval Coverage Results\" MODIFIED=\"1668723858367\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 086b725aac53462cf49c9ca0b6e173a6b1f39799)
+++ b/.idea/workspace.xml	(date 1674822490070)
@@ -3,13 +3,8 @@
   <component name="ChangeListManager">
     <list default="true" id="90b0f737-acac-430b-a76c-cab51a684379" name="Changes" comment="">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/script/DHOV/DHOV.py" beforeDir="false" afterPath="$PROJECT_DIR$/script/DHOV/DHOV.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/script/DHOV/MainDHOV.py" beforeDir="false" afterPath="$PROJECT_DIR$/script/DHOV/MainDHOV.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/script/NeuralNets/Networks.py" beforeDir="false" afterPath="$PROJECT_DIR$/script/NeuralNets/Networks.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/script/NeuralNets/lossFunction.py" beforeDir="false" afterPath="$PROJECT_DIR$/script/NeuralNets/lossFunction.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/script/NeuralNets/trainFunction.py" beforeDir="false" afterPath="$PROJECT_DIR$/script/NeuralNets/trainFunction.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/script/Verification/VerificationBasics.py" beforeDir="false" afterPath="$PROJECT_DIR$/script/Verification/VerificationBasics.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/script/dataInit.py" beforeDir="false" afterPath="$PROJECT_DIR$/script/dataInit.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -41,17 +36,17 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "WebServerToolWindowFactoryState": "false",
-    "last_opened_file_path": "C:/Users/Ufuk/Documents/Programming/ICNN_verification/script/Optimizer",
-    "node.js.detected.package.eslint": "true",
-    "node.js.selected.package.eslint": "(autodetect)",
-    "settings.editor.selected.configurable": "com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
+    &quot;last_opened_file_path&quot;: &quot;C:/Users/Ufuk/Documents/Programming/ICNN_verification/script/Optimizer&quot;,
+    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
+    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable&quot;
   }
-}]]></component>
+}</component>
   <component name="RecentsManager">
     <key name="CopyFile.RECENT_KEYS">
       <recent name="C:\Users\Ufuk\Documents\Programming\ICNN_verification\script\Optimizer" />
@@ -261,7 +256,8 @@
       <workItem from="1674729462120" duration="7423000" />
       <workItem from="1674741702262" duration="101000" />
       <workItem from="1674741815193" duration="462000" />
-      <workItem from="1674742504018" duration="7087000" />
+      <workItem from="1674742504018" duration="7947000" />
+      <workItem from="1674804014374" duration="909000" />
     </task>
     <servers />
   </component>
@@ -334,7 +330,7 @@
     <SUITE FILE_PATH="coverage/DeepHull$main.coverage" NAME="main Coverage Results" MODIFIED="1669233392579" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
     <SUITE FILE_PATH="coverage/ICNN_verification$main.coverage" NAME="main Coverage Results" MODIFIED="1670249050825" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
     <SUITE FILE_PATH="coverage/ICNN_verification$DHOV.coverage" NAME="DHOV Coverage Results" MODIFIED="1674467903275" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/script" />
-    <SUITE FILE_PATH="coverage/ICNN_verification$MainDHOV.coverage" NAME="MainDHOV Coverage Results" MODIFIED="1674749839986" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/script/DHOV" />
+    <SUITE FILE_PATH="coverage/ICNN_verification$MainDHOV.coverage" NAME="MainDHOV Coverage Results" MODIFIED="1674815339726" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/script/DHOV" />
     <SUITE FILE_PATH="coverage/DeepHull$Verification.coverage" NAME="Verification Coverage Results" MODIFIED="1669122239179" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/script" />
     <SUITE FILE_PATH="coverage/ICNN_verification$test.coverage" NAME="test Coverage Results" MODIFIED="1673302337900" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/script" />
     <SUITE FILE_PATH="coverage/DeepHull$eval.coverage" NAME="eval Coverage Results" MODIFIED="1668723858367" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
